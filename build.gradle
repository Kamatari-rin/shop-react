import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3' apply false
	id 'io.spring.dependency-management' version '1.1.7' apply false
	id 'com.github.ben-manes.versions' version '0.51.0' apply false
}

allprojects {
	apply plugin: 'com.github.ben-manes.versions'
	group = 'org.example'
	version = '0.0.2-SNAPSHOT'

	repositories {
		mavenCentral()
	}

	tasks.register("checkDependencies", DependencyUpdatesTask) {
		group = "verification"
		description = "Checks for outdated dependencies"
		gradleReleaseChannel = "current"
		outputFormatter = "json"
		outputDir = "${rootDir}/build/dependencyUpdates"
		reportfileName = "${project.name}-dependency-updates"
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}

	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:3.4.3")
		}
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok:1.18.36'
		annotationProcessor 'org.projectlombok:lombok:1.18.36'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'io.projectreactor:reactor-test'
		testImplementation platform('org.junit:junit-bom:5.10.3')
		testImplementation 'org.junit.jupiter:junit-jupiter'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

		implementation platform('io.micrometer:micrometer-tracing-bom:1.3.3')
		implementation 'io.micrometer:micrometer-tracing'
		implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	}

	tasks.named('test') {
		useJUnitPlatform()
	}

	tasks.named('compileJava') {
		options.annotationProcessorPath = configurations.annotationProcessor
		options.compilerArgs += ['-parameters']
	}

	tasks.withType(JavaCompile) {
		options.incremental = true
	}
}

def webfluxModules = [project(':cart-service'), project(':product-detail'), project(':api-gateway'), project(':common')]
def adminClientModules = [project(':cart-service'), project(':product-detail'), project(':api-gateway')]
def r2dbcModules = [project(':cart-service'), project(':product-detail'), project(':common')]
def actuatorModules = [project(':cart-service'), project(':product-detail'), project(':api-gateway'), project(':admin-server'), project(':common')]
def cacheModules = [project(':cart-service'), project(':product-detail'), project(':common')]
def mapstructModules = [project(':cart-service'), project(':product-detail')]
def logbookModules = [project(':cart-service'), project(':product-detail'), project(':api-gateway'), project(':admin-server')]

webfluxModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'org.springframework.boot:spring-boot-starter-webflux'
		}
	}
}

adminClientModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'de.codecentric:spring-boot-admin-starter-client:3.4.3'
		}
	}
}

r2dbcModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
			implementation 'org.postgresql:r2dbc-postgresql'
		}
	}
}

actuatorModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'org.springframework.boot:spring-boot-starter-actuator'
		}
	}
}

cacheModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'org.springframework.boot:spring-boot-starter-cache'
		}
	}
}

mapstructModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'org.mapstruct:mapstruct:1.5.5.Final'
			annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
		}
	}
}

logbookModules.each { proj ->
	configure(proj) {
		dependencies {
			implementation 'org.zalando:logbook-spring-boot-starter:3.9.0'
			implementation 'org.zalando:logbook-spring-webflux:3.9.0'
			implementation 'org.zalando:logbook-logstash:3.11.0'
			implementation 'net.logstash.logback:logstash-logback-encoder:8.0'
		}
	}
}

project(':common') {
}

project(':cart-service') {
	dependencies {
		implementation project(':common')
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		runtimeOnly 'org.postgresql:postgresql'
	}
}

project(':product-detail') {
	dependencies {
		implementation project(':common')
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		runtimeOnly 'org.postgresql:postgresql'
	}
}

project(':api-gateway') {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	}
}

project(':admin-server') {
	dependencies {
		implementation 'org.zalando:logbook-servlet:3.9.0'
		implementation 'de.codecentric:spring-boot-admin-starter-server:3.4.3'
	}
}

project(':db-migrations') {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		implementation 'org.liquibase:liquibase-core'
		implementation 'org.postgresql:postgresql'
	}
}