x-java-main-service-build: &main-service-build
  build:
    dockerfile: Dockerfile
  depends_on:
    db:
      condition: service_healthy
    db-migrations:
      condition: service_completed_successfully

x-java-service-environment: &java-service-env
  environment:
    - JAVA_OPTS=-Xmx768m -Xms512m
    - JAVA_TOOL_OPTIONS=-javaagent:/otel/opentelemetry-javaagent.jar
    - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    - OTEL_INSTRUMENTATION_LOGBACK_MDC_ENABLED=true
    - OTEL_LOGS_EXPORTER=none
  volumes:
    - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar


x-limits: &performance-limits
  mem_limit: 1g
  mem_reservation: 512m
  cpus: 0.5
  restart: unless-stopped
  networks:
    - app-network

x-logs: &logs
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "5"

x-healthcheck-main-serices: &main-services-healthcheck-config
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:${HEALTH_PORT:-8080}/actuator/health" ]
    interval: 30s
    timeout: 10s
    retries: 3
  environment:
    - HEALTH_PORT=8080

x-healthcheck-infra-serices: &infra-services-healthcheck-config
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:${HEALTH_PORT:-9200}" ]
    interval: 30s
    timeout: 10s
    retries: 3

x-java-service-basic: &basic-services
  <<: [*logs, *performance-limits]

x-java-service-main: &main-services
  <<: [*main-service-build, *java-service-env, *logs, *performance-limits, *main-services-healthcheck-config]

x-java-service-common: &common-services
  <<: [*logs, *performance-limits, *infra-services-healthcheck-config]

services:
  # --- Базовые сервисы ---
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: userdb,productdb,cartdb,ordersdb,purchasedb
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_WORK_MEM: 8MB
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    mem_limit: 2g
    mem_reservation: 1g

  db-migrations:
    build:
      context: ./db-migrations
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # --- Основные микросервисы ---
  user-service:
    <<: *main-services
    build:
      context: ./user-service
    environment:
      - OTEL_SERVICE_NAME=user-service

  product-catalog:
    <<: *main-services
    build:
      context: ./product-catalog
    environment:
      - OTEL_SERVICE_NAME=product-catalog

  product-detail:
    <<: *main-services
    build:
      context: ./product-detail
    environment:
      - OTEL_SERVICE_NAME=product-detail

  cart-service:
    <<: *main-services
    build:
      context: ./cart-service
    environment:
      - OTEL_SERVICE_NAME=cart-service

  orders-list:
    <<: *main-services
    build:
      context: ./orders-list
    environment:
      - OTEL_SERVICE_NAME=orders-list

  order-detail:
    <<: *main-services
    build:
      context: ./order-detail
    environment:
      - OTEL_SERVICE_NAME=order-detail

  purchase-service:
    <<: *main-services
    build:
      context: ./purchase-service
    environment:
      - OTEL_SERVICE_NAME=purchase-service

  # --- Вспомогательные сервисы ---
  api-gateway:
    <<: *main-services
    build:
      context: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      - OTEL_SERVICE_NAME=api-gateway

  admin-server:
    build:
      context: ./admin-server
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - app-network
    environment:
      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+EnableDynamicAgentLoading
      - JAVA_TOOL_OPTIONS=-javaagent:/otel/opentelemetry-javaagent.jar
      - OTEL_SERVICE_NAME=admin-server
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_INSTRUMENTATION_LOGBACK_MDC_ENABLED=true
      - OTEL_LOGS_EXPORTER=none
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    mem_limit: 1g
    mem_reservation: 512m

  otel-collector:
    <<: *common-services
    image: otel/opentelemetry-collector-contrib:0.101.0
    command: [ "--config=/etc/otel/config.yaml" ]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel/config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    environment:
      - HEALTH_PORT=13133
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:13133" ]

  jaeger:
    <<: *common-services
    image: jaegertracing/all-in-one:1.56
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - HEALTH_PORT=16686
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:16686" ]

  elasticsearch:
    <<: *common-services
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - HEALTH_PORT=9200
    ports:
      - "9200:9200"

  logstash:
    <<: *common-services
    image: docker.elastic.co/logstash/logstash:8.14.0
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - HEALTH_PORT=9600
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:9600" ]

  kibana:
    <<: *common-services
    image: docker.elastic.co/kibana/kibana:8.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - NODE_OPTIONS=--max-old-space-size=1024
      - xpack.security.encryptionKey=${KIBANA_SECURITY_KEY}
      - xpack.encryptedSavedObjects.encryptionKey=${KIBANA_SAVED_OBJECTS_KEY}
      - xpack.reporting.encryptionKey=${KIBANA_REPORTING_KEY}
      - HEALTH_PORT=5601
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

networks:
  app-network: