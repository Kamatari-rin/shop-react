services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app-network

  admin-server:
    build:
      context: ./admin-server
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  product-catalog:
    build:
      context: ./product-catalog
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  product-detail:
    build:
      context: ./product-detail
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  orders-list:
    build:
      context: ./orders-list
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  order-detail:
    build:
      context: ./order-detail
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  purchase-service:
    build:
      context: ./purchase-service
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 555666
      POSTGRES_MULTIPLE_DATABASES: userdb,productdb,cartdb,ordersdb,purchasedb
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  db-migrations:
    build:
      context: db-migrations
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network: